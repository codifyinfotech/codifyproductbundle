<style>
  .cpbundlew_widgetWrap {
    --button-border-color: #000;
    --button-bg-color: #000;
    --button-txt-color: #fff;
    --button-hover-bg-color: #fff;
    --button-hover-txt-color: #000;
  }
  .cpbundlew_widgetWrap {
    max-width: 1440px;
    margin: 28px auto;
  }
  .cpbundlew_widget {
    padding: 0 16px;
}

  .cpbundlew_widgetLoader {
    text-align: center;
}

.cpbundlew_mainTitle {
    margin: 0;
    font-size: 22px;
}

.cpbundlew_subtitle {
    margin-top: 8px;
    font-size: 18px;
    line-height: normal;
}

.cpbundlew_header {
    margin-bottom: 24px;
}

.cpbundlew_bundleProducts {
    padding: 16px;
    border: 1px solid lightgray;
}

.cpbundlew_grid {
    display: flex;
    flex-wrap: wrap;
    margin-left: -28px;
    margin-bottom: -28px;
}

.cpbundlew_gridItem {
    width: 100%;
    padding-left: 28px;
    padding-bottom: 40px;
    position: relative;
}

  .cpbundlew_gridItem:last-child {
    padding-bottom: 28px;
  }

.cpbundlew_gridImage img {
    display: block;
    max-height: 350px;
    margin: 0 auto;
    max-width: 100%;
}

.cpbundlew_gridImage {
    margin-bottom: 16px;
}

.cpbundlew_gridTitle {
    font-size: 18px;
    line-height: normal;
    margin: 0 0 6px;
}

.cpbundlew_gridTitle a {
    text-decoration: none;
    color: inherit;
}

.cpbundlew_gridTitle a:hover {
    text-decoration: none;
    color: inherit;
}

.cpbundlew_gridImagea {
    text-decoration: none;
    color: inherit;
}

.cpbundlew_gridImage a,.cpbundlew_gridImage a:hover {
    text-decoration: none;
}

.cpbundlew_gridPricing {
    display: flex;
    flex-wrap: wrap;
    font-size: 16px;
    line-height: normal;
}

.cpbundlew_gridPrice {
    margin-right: 8px;
}

.cpbundlew_onSale .cpbundlew_salePrice {
    font-weight: bold;
}

.cpbundlew_regularPrice {
    text-decoration: line-through;
    display: none;
}

  .cpbundlew_onSale .cpbundlew_regularPrice { display: inline; }

.cpbundlew_options {
    display: flex;
    flex-wrap: wrap;
    margin-top: 12px;
    margin-left: -12px;
    margin-bottom: -12px;
}

.cpbundlew_option {
    padding-left: 12px;
    padding-bottom: 12px;
    flex: 1 1 auto;
}

.cpbundlew_select {
    width: 100%;
    font-size: 16px;
    padding: 8px 20px 8px 12px;
}

.cpbundlew_label {
    font-size: 14px;
    line-height: normal;
}

  .cpbundlew_summaryWrap {
      border-color: lightgray;
      border-width: 0 1px 1px 1px;
      border-style: solid;
      padding: 16px;
  }

.cpbundlew_summary {
    display: flex;
    flex-wrap: wrap;
    margin-left: -16px;
    margin-bottom: -16px;
}

  .cpbundlew_summaryItem {
    width: 100%;
    padding-left: 16px;
    padding-bottom: 16px;
}

  .cpbundlew_discountValue {font-size: 16px;}
  
  .cpbundlew_action { align-self: end; }

  .cpbundlew_action .cpbundlew_button { width: 100%; }

  .cpbundlew_summaryItem label {
    font-size: 14px;
    line-height: normal;
    margin-bottom: 2px;
    display: block;
}

  .cpbundlew_totalPrice {
    font-size: 16px;
    line-height: normal;
    display: inline-block;
    margin-right: 4px;
}

.cpbundlew_onSale .cpbundlew_totalSalePrice {
    font-weight: bold;
}

  .cpbundlew_discountValue {
    font-weight: bold;
}
  
  .cpbundlew_badge {
    text-transform: uppercase;
    font-size: 12px;
    line-height: normal;
    padding: 2px 6px;
    border: 1px solid currentColor;
    letter-spacing: 0.6px;
}

  .cpbundlew_totalRegularPrice { text-decoration: line-through;display: none; }
  .cpbundlew_onSale .cpbundlew_totalRegularPrice {display: inline-block;}

  .cpbundlew_button { font-size: 16px; line-height: normal; border-radius: 4px; padding: 8px 12px; cursor: pointer; background-color: var(--button-bg-color); color: var(--button-txt-color); border: 1px solid var(--button-border-color); }
  .cpbundlew_button:hover { background-color: var(--button-hover-bg-color); color: var(--button-hover-txt-color); }
  .cpbundlew_button:disabled {opacity: 0.6;cursor: not-allowed;}

  .cpbundlew_button.cpbundlew_loading {opacity: 0.6;cursor: not-allowed;padding-top: 3px; padding-bottom: 3px;}
  .cpbundlew_button.cpbundlew_loading .cpbundlew_btnText {display: none;}
  .cpbundlew_button:not(.cpbundlew_loading) .cpbundlew_btnLoader {display: none;}
  .cpbundlew_button .cpbundlew_btnLoader svg { width: 30px; height: 30px; }

  .cpbundlew_grid .cpbundlew_loader {
    padding-left: 28px;
    padding-bottom: 28px;
    margin: auto;
}

  .cpbundlew_error { color: #ff3333; font-size: 14px; margin-top: 4px; }

  .cpbundlew_gridItem:last-child .cpbundlew_plusIcon { display: none; }
  
  .cpbundlew_hide {display: none;}
  
  .cpbundlew_icon svg { display: block;fill: currentColor; }
  .cpbundlew_icon svg path { fill: currentColor; }

  .cpbundlew_gridInner .cpbundlew_plusIcon {position: absolute; bottom: 10px; left: calc(50% + 4px);}
  .cpbundlew_gridInner .cpbundlew_plusIcon svg {width: 20px; height: 20px;}
  
  .cpbundlew_loader { display: inline-block; vertical-align: middle; }
  .cpbundlew_loader svg { display: block; animation: spin .5s linear 0s infinite; }
  .cpbundlew_loader svg path { fill: currentColor }

  .cpbundlew_layoutVertical .cpbundlew_bundleProducts {padding: 0;}

  .cpbundlew_layoutVertical .cpbundlew_grid {
    margin-left: 0;
    margin-bottom: 0;
}

  .cpbundlew_layoutVertical .cpbundlew_gridTitle {font-size: 16px;margin-bottom: 4px;}
  
  .cpbundlew_layoutVertical .cpbundlew_gridItem {
    width: 100%;
    padding-left: 0;
    padding: 16px;
}

.cpbundlew_layoutVertical .cpbundlew_gridItem:not(:last-child) {
  border-bottom: 1px solid #d3d3d3;
}

.cpbundlew_layoutVertical .cpbundlew_plusIcon {
    display: none;
}

.cpbundlew_layoutVertical .cpbundlew_gridInner {
    display: flex;
    align-items: flex-start;
}

.cpbundlew_layoutVertical .cpbundlew_gridImage {
    width: 20%;
    min-width: 80px;
    max-width: 175px;
    margin-bottom: 0;
}

.cpbundlew_layoutVertical .cpbundlew_gridInfo {
    width: 80%;
    padding-left: 16px;
}

.cpbundlew_layoutVertical .cpbundlew_summaryItem {
    width: 100%;
}

.cpbundlew_layoutVertical .cpbundlew_option {
    flex: 0 1 auto;
}

.cpbundlew_layoutVertical .cpbundlew_action .cpbundlew_button {
    max-width: 500px;
}

  @keyframes spin {
    from { transform: rotate(0); }
    to { transform: rotate(360deg); }
  }

  @media (min-width: 600px) {
    .cpbundlew_widget { padding: 0 20px; }
    .cpbundlew_gridItem { width: 50%;padding-bottom: 28px; }
    .cpbundlew_gridInner .cpbundlew_plusIcon { bottom: auto; left: auto; top: calc(50% - 44px); right: -24px; }

    .cpbundlew_grid-3 .cpbundlew_totalPricing, .cpbundlew_grid-3 .cpbundlew_discount {width: 50%;}
     
    .cpbundlew_totalPrice { font-size: 18px; }
    .cpbundlew_discountValue {font-size: 18px;}
    .cpbundlew_summaryItem label {font-size: 16px; margin-bottom: 4px;}
  }

  @media (min-width: 768px) {
    .cpbundlew_widgetWrap {margin-top: 36px;margin-bottom: 36px;}
    
    .cpbundlew_header {margin-bottom: 28px;}
    .cpbundlew_subtitle {margin-top: 12px;}
    .cpbundlew_grid-2 .cpbundlew_gridItem:nth-child(2n + 2) .cpbundlew_plusIcon { display: none; }
    .cpbundlew_grid-2 .cpbundlew_gridItem { width: 50%; }
    .cpbundlew_grid-3 .cpbundlew_gridItem:nth-child(3n + 3) .cpbundlew_plusIcon { display: none; }
    .cpbundlew_grid-3 .cpbundlew_gridItem { width: 33.33%; }
    .cpbundlew_gridImage {margin-bottom: 20px;}
    .cpbundlew_gridTitle {margin-bottom: 8px;}
    .cpbundlew_grid-2 .cpbundlew_summary { justify-content: center; }
    .cpbundlew_grid-2 .cpbundlew_totalPricing, .cpbundlew_grid-2 .cpbundlew_discount { width: auto; text-align: center; } 
    .cpbundlew_grid-2 .cpbundlew_action { width: 100%;text-align: center; }
    .cpbundlew_grid-2 .cpbundlew_action .cpbundlew_button { max-width: 500px; }
    .cpbundlew_grid-3 .cpbundlew_summaryItem { width: 33.33%; }
  }

  @media (min-width: 600px) and (max-width: 767px)  {
    .cpbundlew_gridItem:nth-child(2n + 2) .cpbundlew_plusIcon { display: none; }
  }

  @media (min-width: 992px) {
    .cpbundlew_bundleProducts { padding: 20px; }
    
    .cpbundlew_summaryWrap {padding: 20px;}
    .cpbundlew_summary{margin-left: -20px; margin-bottom: -20px;}
    .cpbundlew_summaryItem {padding-left: 20px; padding-bottom: 20px;}
  }
</style>

<div class="cpbundlew_widgetWrap">
  {% capture plusIcon %}
    <div class="cpbundlew_icon cpbundlew_plusIcon">
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path fill-rule="evenodd" clip-rule="evenodd" d="M24 12C24 18.6274 18.6274 24 12 24C5.37258 24 0 18.6274 0 12C0 5.37258 5.37258 0 12 0C18.6274 0 24 5.37258 24 12ZM11 5C11 4.44772 11.4477 4 12 4C12.5523 4 13 4.44772 13 5V11H19C19.5523 11 20 11.4477 20 12C20 12.5523 19.5523 13 19 13H13V19C13 19.5523 12.5523 20 12 20C11.4477 20 11 19.5523 11 19V13H5C4.44772 13 4 12.5523 4 12C4 11.4477 4.44772 11 5 11H11V5Z" fill="#100F0F"/>
      </svg>
    </div>
  {% endcapture %}
  
  {% capture loader %}
    <div class="cpbundlew_loader">
      <svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="40px" height="40px" viewBox="0 0 50 50" xml:space="preserve">
        <path d="M43.935,25.145c0-10.318-8.364-18.683-18.683-18.683c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615c8.072,0,14.615,6.543,14.615,14.615H43.935z"></path>
      </svg>
    </div>  
  {% endcapture %}

  <div class="cpbundlew_widgetLoader">{{ loader }}</div>
  
  <div class="cpbundlew_widget cpbundlew_hide" data-handle="{{ product.handle | default: 'none' }}" data-collections="{{ product.collections | map: 'handle' | join: '|' | default: 'none' }}">
    <div class="cpbundlew_header">
      <h3 class="cpbundlew_mainTitle"></h3>
      <p class="cpbundlew_subtitle"></p>
    </div>
    <div class="cpbundlew_bundleProducts">
      <div class="cpbundlew_grid"></div>
    </div>
  
    <div class="cpbundlew_summaryWrap">
      <div class="cpbundlew_summary">
        <div class="cpbundlew_summaryItem cpbundlew_totalPricing">
          <label class="cpbundlew_totalPriceLabel">Total price:</label>
          <span class="cpbundlew_totalPrice cpbundlew_totalSalePrice"></span>
          <span class="cpbundlew_totalPrice cpbundlew_totalRegularPrice"></span>
        </div>
        <div class="cpbundlew_summaryItem cpbundlew_discount">
          <label class="cpbundlew_discountLabel">Discount:</label>
          <span class="cpbundlew_discountValue"></span>
        </div>
        <div class="cpbundlew_summaryItem cpbundlew_action">
          <button type="button" class="cpbundlew_button cpbundlew_addButton" disabled>
            <span class="cpbundlew_btnText">Add to cart</span>
            <span class="cpbundlew_btnLoader">{{ loader }}</span>
          </button>
          <p class="cpbundlew_error cpbundlew_atcError cpbundlew_hide">Some of the bundle products aren't available.</p>
        </div>
      </div>
    </div>
  </div>

  <script type="text/plain" id="cpbundlewProductMarkup">          
    {% raw %}
      <div class="cpbundlew_gridItem" data-id="[variantId]">
        <div class="cpbundlew_gridInner">
          <div class="cpbundlew_gridImage">
            <a href="[url]">
              <img src="[image]" />
            </a>
          </div>
          <div class="cpbundlew_gridInfo">
            <h4 class="cpbundlew_gridTitle"><a href="[url]">[title]</a></h4>
            <div class="cpbundlew_gridPricing" data=[price]>
              <span class="cpbundlew_gridPrice cpbundlew_salePrice">[salePrice]</span>
              <span class="cpbundlew_gridPrice cpbundlew_regularPrice">[regularPrice]</span>
              <span class="cpbundlew_badge cpbundlew_hide"></span>
            </div>
            <div class="cpbundlew_options"></div>
            <input type="hidden" class="cpbundlew_variants" />
          </div>
          {% endraw %}{{ plusIcon }}{% raw %}
        </div>
      </div>
    {% endraw %}
  </script>

  <script type="text/plain" id="cpbundlewOptionMarkup">
    {% raw %}
      <div class="cpbundlew_option">
        <label class="cpbundlew_label">[optionName]</label>
        <select class="cpbundlew_select">[optionValues]</select>
      </div>
    {% endraw %}
  </script>
</div>  
{% capture rootAddUrl %}{{ routes.root_url }}{{ routes.cart_add_url }}{% endcapture %}      
<script>
  let cpbundlew = {};
  cpbundlew.money_format = "{{ shop.money_format }}";
  cpbundlew.cartAddUrl = "{{ rootAddUrl | replace: '//', '/' }}";
  
  cpbundlew.formatMoney = function(cents, format) {
    if (typeof cents == 'string') { cents = cents.replace('.',''); }
    var value = '';
    var placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
    var formatString = (format || this.money_format);
  
    function defaultOption(opt, def) {
      return (typeof opt == 'undefined' ? def : opt);
    }
  
    function formatWithDelimiters(number, precision, thousands, decimal) {
      precision = defaultOption(precision, 2);
      thousands = defaultOption(thousands, ',');
      decimal   = defaultOption(decimal, '.');
  
      if (isNaN(number) || number == null) { return 0; }
  
      number = (number/100.0).toFixed(precision);
  
      var parts   = number.split('.'),
          dollars = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1' + thousands),
          cents   = parts[1] ? (decimal + parts[1]) : '';
  
      return dollars + cents;
    }
  
    switch(formatString.match(placeholderRegex)[1]) {
      case 'amount':
        value = formatWithDelimiters(cents, 2);
        break;
      case 'amount_no_decimals':
        value = formatWithDelimiters(cents, 0);
        break;
      case 'amount_with_comma_separator':
        value = formatWithDelimiters(cents, 2, '.', ',');
        break;
      case 'amount_no_decimals_with_comma_separator':
        value = formatWithDelimiters(cents, 0, '.', ',');
        break;
    }
  
    return formatString.replace(placeholderRegex, value);
  };

  function cpbundlewCalcPrice() {
    if(typeof cpbundlew.discount == 'undefined' || typeof cpbundlew.discountType == 'undefined') return;
  
    let totalPrice = 0,formattedPrice, salePrice, discntPrice;
    document.querySelectorAll('.cpbundlew_gridPricing').forEach(function(elem){
      totalPrice = totalPrice + parseInt(elem.getAttribute('data'));
    });

    formattedPrice = cpbundlew.formatMoney(totalPrice, cpbundlew.money_format);
    let discnt = parseFloat(cpbundlew.discount);
    if(discnt > 0) {
      if(cpbundlew.discountType == 'percentage') {
        discntPrice = Math.round((totalPrice * discnt) / 100);
      } else {
        discntPrice = Math.round(discnt * 100);
      }
      discntPrice = Math.min(discntPrice, totalPrice);
      salePrice = totalPrice - discntPrice;
      
      document.querySelector('.cpbundlew_totalSalePrice').innerHTML = cpbundlew.formatMoney(salePrice, cpbundlew.money_format);
      document.querySelector('.cpbundlew_totalRegularPrice').innerHTML = formattedPrice;
      document.querySelector('.cpbundlew_totalPricing').classList.add('cpbundlew_onSale');
    } else {
      discntPrice = 0;
      document.querySelector('.cpbundlew_totalSalePrice').innerHTML = formattedPrice;
      document.querySelector('.cpbundlew_totalPricing').classList.remove('cpbundlew_onSale');
    }
    document.querySelector('.cpbundlew_discountValue').innerHTML = cpbundlew.formatMoney(discntPrice, cpbundlew.money_format);
  }

  function cpbundlewUpdateButton() {
    let allProductsAvail = true;
    document.querySelectorAll('.cpbundlew_gridItem').forEach(function(elem){
      if(elem.classList.contains('cpbundlew_soldOut') || elem.classList.contains('cpbundlew_unavailable')) allProductsAvail = false;
    });
    if(allProductsAvail) {
      document.querySelector('.cpbundlew_addButton').disabled = false;
      document.querySelector('.cpbundlew_atcError').classList.add('cpbundlew_hide');
    } else {
      document.querySelector('.cpbundlew_addButton').disabled = true;
      document.querySelector('.cpbundlew_atcError').classList.remove('cpbundlew_hide');
    }
  }
  
  function cpbundlewImgURL(src, size) {
    return src
      .replace(/_(pico|icon|thumb|small|compact|medium|large|grande|original|1024x1024|2048x2048|master)+\./g, '.')
      .replace(/\.jpg|\.png|\.gif|\.jpeg/g, function(match) {
        return '_'+size+match;
      })
    ;
  }

  function cpbundlewBuild(bundle) {
    let productsHTML = '';
    let widgetRoot = document.querySelector('.cpbundlew_widgetWrap');
    let product_grid = document.querySelector('.cpbundlew_grid');
    let totalProducts = Object.keys(bundle.productsDetails).length;

    cpbundlew.discount = bundle.discount;
    cpbundlew.discountType = bundle.discountType;
    cpbundlew.text_soldout = bundle.text_soldout;
    cpbundlew.text_unavail = bundle.text_unavail;

    widgetRoot.style.setProperty('--button-border-color', bundle.button_border_color || '#000000');
    widgetRoot.style.setProperty('--button-bg-color', bundle.button_bg_color || '#000000');
    widgetRoot.style.setProperty('--button-txt-color', bundle.button_txt_color || '#ffffff');
    widgetRoot.style.setProperty('--button-hover-bg-color', bundle.button_hover_bg_color || '#ffffff');
    widgetRoot.style.setProperty('--button-hover-txt-color', bundle.button_hover_txt_color || '#000000');
    
    document.querySelector('.cpbundlew_mainTitle').innerHTML = bundle.title;
    if(bundle.subtitle != '') {
      document.querySelector('.cpbundlew_subtitle').innerHTML = bundle.subtitle;
    } else {
      document.querySelector('.cpbundlew_subtitle').remove();
    }

    if(bundle.layout == 'vertical') {
      widgetRoot.classList.add('cpbundlew_layoutVertical');
    } else {
      widgetRoot.classList.add('cpbundlew_grid-'+(bundle.products_per_row || '3'));
    }
    document.querySelector('.cpbundlew_addButton .cpbundlew_btnText').innerHTML = bundle.text_add || 'Add to cart';
    document.querySelector('.cpbundlew_atcError').innerHTML = bundle.text_unavail_err || 'Some of the bundle products aren\'t available.'
    if(bundle.extraClass != '') {
      bundle.extraClass.split(' ').forEach(function(value){
        widgetRoot.classList.add(value);
      });
    }

    for(let handle in bundle.productsDetails) {
      let productMarkup = document.getElementById('cpbundlewProductMarkup').innerHTML;
      let optionMarkup = document.getElementById('cpbundlewOptionMarkup').innerHTML;
      let selected_variant = null,availableOptions = [];
      let product = bundle.productsDetails[handle], variants = {};

      productMarkup = productMarkup.replace(/\[title\]/g, product.title);
      productMarkup = productMarkup.replace(/\[url\]/g, '/products/'+handle);
      if(product.image != null) {
        productMarkup = productMarkup.replace(/\[image\]/g, cpbundlewImgURL(product.image, 'grande'));
      }
      
      product.variants.map(function(variant){
        if(selected_variant == null) {
          if(variant.availableForSale) selected_variant = variant;
        }
        variant.selectedOptions.map(function(option){
          if(availableOptions.indexOf(option.value) == -1) availableOptions.push(option.value);
        });
        variants[variant.title] = {
          available: variant.availableForSale,
          id: variant.id.replace('gid://shopify/ProductVariant/',''),
          price: variant.price,
          compareAtPrice: variant.compareAtPrice,
          image: variant.image
        }
      });
      
      selected_variant = selected_variant == null ? product.variants[0] : selected_variant;
            
      let price = Math.round(parseFloat(selected_variant.price) * 100);
      productMarkup = productMarkup.replace(/\[price\]/g, price);
      productMarkup = productMarkup.replace(/\[salePrice\]/g, cpbundlew.formatMoney(price, cpbundlew.money_format));
      if(selected_variant.compareAtPrice != null) {
        let compareAtPrice = Math.round(parseFloat(selected_variant.compareAtPrice) * 100);
        productMarkup = productMarkup.replace(/\[regularPrice\]/g, cpbundlew.formatMoney(compareAtPrice, cpbundlew.money_format));
      }    

      productMarkup = productMarkup.replace(/\[variantId\]/g, selected_variant.id.replace('gid://shopify/ProductVariant/',''));

      productMarkup = new DOMParser().parseFromString(productMarkup, 'text/html');

      if(product.image == null) productMarkup.querySelector('.cpbundlew_gridImage').remove();
      if(selected_variant.compareAtPrice != null) {
        productMarkup.querySelector('.cpbundlew_gridPricing').classList.add('cpbundlew_onSale');
      }

      if(!selected_variant.availableForSale) {
        productMarkup.querySelector('.cpbundlew_badge').innerHTML = cpbundlew.text_soldout || 'Sold out';
        productMarkup.querySelector('.cpbundlew_badge').classList.remove('cpbundlew_hide');  
        productMarkup.querySelector('.cpbundlew_gridItem').classList.add('cpbundlew_soldOut');
      }     
      
      if(product.hasOnlyDefaultVariant) {
        productMarkup.querySelector('.cpbundlew_options').remove(); 
        productMarkup.querySelector('.cpbundlew_variants').remove();
      } else {
        optionMarkup = new DOMParser().parseFromString(optionMarkup, 'text/html');
        let optionsMarkup = '', optionValuesMarkup, selected;
        product.options.map(function(option, index){
          optionValuesMarkup = '';
          optionMarkup.querySelector('.cpbundlew_option .cpbundlew_label').innerHTML = option.name;
          option.values.map(function(value){
            if(availableOptions.indexOf(value) >= 0) {
              selected = selected_variant.selectedOptions[index].value == value ? 'selected' : '';
              optionValuesMarkup += '<option value="'+value.replace(/\"/g,'&quot;').replace(/\'/g,'&apos;')+'" '+selected+'>'+value+'</option>';
            } 
          });
          optionMarkup.querySelector('.cpbundlew_option .cpbundlew_select').innerHTML = optionValuesMarkup;
          optionsMarkup += optionMarkup.querySelector('.cpbundlew_option').outerHTML;
        });
        productMarkup.querySelector('.cpbundlew_options').innerHTML = optionsMarkup;
        productMarkup.querySelector('.cpbundlew_variants').value = JSON.stringify(variants);
      }
      
      productsHTML += productMarkup.querySelector('.cpbundlew_gridItem').outerHTML;
    }
    product_grid.innerHTML = productsHTML;
    cpbundlewCalcPrice();
    cpbundlewUpdateButton();
  }

  function cpbundlewInitEvents() {
    document.querySelectorAll('.cpbundlew_select').forEach(function(elem){
      elem.addEventListener('change', function(){
        let parent = this.closest('.cpbundlew_gridItem');
        let variants = JSON.parse(this.closest('.cpbundlew_gridInfo').querySelector('.cpbundlew_variants').value);
        let titleArr = [], titleStr, variant, price, comparePrice;
        parent.querySelectorAll('.cpbundlew_option').forEach(function(opt){
          titleArr.push(opt.querySelector('.cpbundlew_select').value);
        });
        titleStr = titleArr.join(' / ')
        variant = variants[titleStr];
        if(typeof variant == 'undefined') {
          parent.classList.add('cpbundlew_unavailable');
          parent.classList.remove('cpbundlew_soldOut');
          parent.querySelector('.cpbundlew_salePrice').innerHTML = '';
          parent.querySelector('.cpbundlew_gridPricing').classList.remove('cpbundlew_onSale');
          parent.querySelector('.cpbundlew_badge').innerHTML = cpbundlew.text_unavail || 'Unavailable';
          parent.querySelector('.cpbundlew_badge').classList.remove('cpbundlew_hide');  
        } else {
          if(variant.available) {
            parent.classList.remove('cpbundlew_soldOut');
            parent.querySelector('.cpbundlew_badge').classList.add('cpbundlew_hide');  
          } else {
            parent.classList.add('cpbundlew_soldOut');
            parent.querySelector('.cpbundlew_badge').innerHTML = cpbundlew.text_soldout || 'Sold out';
            parent.querySelector('.cpbundlew_badge').classList.remove('cpbundlew_hide');  
          }
          parent.setAttribute('data-id', variant.id);
          price = Math.round(parseFloat(variant.price) * 100);
          parent.querySelector('.cpbundlew_salePrice').innerHTML = cpbundlew.formatMoney(price, cpbundlew.money_format);
          parent.querySelector('.cpbundlew_gridPricing').setAttribute('data',price);

          if(variant.compareAtPrice != null) {
            comparePrice = Math.round(parseFloat(variant.compareAtPrice) * 100);
            if(comparePrice > price) {
              parent.querySelector('.cpbundlew_regularPrice').innerHTML = cpbundlew.formatMoney(comparePrice, cpbundlew.money_format);;
              parent.querySelector('.cpbundlew_gridPricing').classList.add('cpbundlew_onSale');  
            } else {
              parent.querySelector('.cpbundlew_gridPricing').classList.remove('cpbundlew_onSale');  
            }            
          } else {
            parent.querySelector('.cpbundlew_gridPricing').classList.remove('cpbundlew_onSale');
          }

          if(variant.image != null) {
            parent.querySelector('.cpbundlew_gridImage img').setAttribute('src', cpbundlewImgURL(variant.image.url, 'grande'));
          }
          
          parent.classList.remove('cpbundlew_unavailable');
        }
        cpbundlewCalcPrice();
        cpbundlewUpdateButton();
      });
    });

    let bundleAddBtn = document.querySelector('.cpbundlew_addButton');
    if(bundleAddBtn != null) {
      bundleAddBtn.addEventListener('click', function(){
        let _this = this;
        if(_this.disabled || _this.classList.contains('cpbundlew_loading')) return;
        let variantIds = [];

        _this.classList.add('cpbundlew_loading');
        
        document.querySelectorAll('.cpbundlew_gridItem').forEach(function(elem){
          variantIds.push({
            id: elem.getAttribute('data-id'),
            quantity: 1
          });
        });
        
        fetch(cpbundlew.cartAddUrl+'.js',{
          method: 'POST',
          dataType: 'json',
          body: JSON.stringify({
            items: variantIds
          }),
          headers: {
            'Content-type': 'application/json'
          }
        })
        .then(function(response){
          if(response.ok) {
            return response.json();
          }
          throw new Error('Error adding to cart');
        })
        .then(function(result){
          location.href = '/cart';
          document.querySelector('.cpbundlew_addButton').classList.remove('cpbundlew_loading');
        })
        .catch(function(e){
          document.querySelector('.cpbundlew_addButton').classList.remove('cpbundlew_loading');
        }); 
      });
    }
  }

  document.addEventListener('DOMContentLoaded', function(){
    let cpbundlew_widget = document.querySelector('.cpbundlew_widget');
    if(cpbundlew_widget != null) {
        cpbundlew_handle = cpbundlew_widget.getAttribute('data-handle');
        cpbundlew_collection = cpbundlew_widget.getAttribute('data-collections');
        if(cpbundlew_handle != 'none' || cpbundlew_collection != 'none') {
          fetch('/apps/a/productBundle', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              handle: cpbundlew_handle,
              collections: cpbundlew_collection
            })
          })
          .then(function(response) {
            if(response.ok) {
              return response.json();
            }
            throw new Error('Something went wrong');
          })
          .then(function(result){
            if(result.success && result.data != null) {
              if(result.data.status == 'active') {
                cpbundlewBuild(result.data);
                document.querySelector('.cpbundlew_widgetLoader').classList.add('cpbundlew_hide');
                document.querySelector('.cpbundlew_widget').classList.remove('cpbundlew_hide');
                cpbundlewInitEvents(); 
              } else {
                document.querySelector('.cpbundlew_widgetWrap').classList.add('cpbundlew_hide');
              }
            } else {
              throw new Error('Cannot fetch bundle products');
            }
          })
          .catch(function(e){
            console.log(e);
            document.querySelector('.cpbundlew_widgetWrap').classList.add('cpbundlew_hide');
          })
      } else {
        document.querySelector('.cpbundlew_widgetWrap').classList.add('cpbundlew_hide');
      }
    }
  });
</script>